
import { GoogleGenAI, Modality } from "@google/genai";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  // In a real app, you might want to handle this more gracefully,
  // but for this environment, we assume the key is present.
  console.error("API_KEY environment variable is not set.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY! });

const fileToGenerativePart = (base64Data: string) => {
  const match = base64Data.match(/^data:(.+);base64,(.+)$/);
  if (!match) {
    throw new Error("Invalid base64 data URL format");
  }
  const mimeType = match[1];
  const data = match[2];
  return {
    inlineData: {
      data,
      mimeType,
    },
  };
};

export const generateHuggingImage = async (
  childhoodImgBase64: string,
  presentImgBase64: string
): Promise<string> => {
    const childhoodImgPart = fileToGenerativePart(childhoodImgBase64);
    const presentImgPart = fileToGenerativePart(presentImgBase64);

    const prompt = `Using the two images provided, create a new, photorealistic image. The subject in the first image is a child. The subject in the second image is the same person as an adult. The new image should depict the adult warmly and lovingly hugging the child. The background should be soft, slightly blurred, and evoke a sense of warmth and nostalgia. The final image must be a single, coherent, and emotionally touching scene, blending the styles and lighting of both original photos.`;

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: {
            parts: [
                childhoodImgPart,
                presentImgPart,
                { text: prompt },
            ],
        },
        config: {
            responseModalities: [Modality.IMAGE],
        },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
            const base64ImageBytes: string = part.inlineData.data;
            const mimeType = part.inlineData.mimeType;
            return `data:${mimeType};base64,${base64ImageBytes}`;
        }
    }
    
    throw new Error("No image was generated by the API. Please try again with different images.");
};
